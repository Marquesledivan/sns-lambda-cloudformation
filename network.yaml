Resources:
### My VPC Creating ###
  NewVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.100.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-VPC

  NewInternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: NewVPC
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-InternetGateway

  MYAttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref NewVPC
      InternetGatewayId: !Ref NewInternetGateway

  SubnetPublic:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.100.1.0/24
      VpcId: !Ref NewVPC
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Public

  SubnetPrivate:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.100.10.0/24
      MapPublicIpOnLaunch: false
      VpcId: !Ref NewVPC
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Private

  MYIpElasctic:
    Type: AWS::EC2::EIP
    Properties:
      Domain: NewVPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-ip

  NewNatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt MYIpElasctic.AllocationId
      SubnetId: !Ref SubnetPublic
      Tags:
        - Key: Name
          Value: !Join ['', ["NAT-", !Ref "AWS::StackName" ]]

#### Creating route table Private ####
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref NewVPC
      Tags:
        - Key: Name
          Value: !Join ['', ["RouteTable-", !Ref "AWS::StackName", "-Private" ]]

#### Creating route Associating in table Private in nat GW ####
  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NewNatGateway

#### Creating route table Public ####
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref NewVPC
      Tags:
        - Key: Name
          Value: !Join ['', ["RouteTable-", !Ref "AWS::StackName", "-Public" ]]

#### Creating route Associating in table Public in InternetGateway ####
  PublicRoute:
    DependsOn: NewInternetGateway
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref NewInternetGateway

### Associating the route table with the subnet public ###
  PublicRouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref SubnetPublic

### Associating the route table with the subnet private ###
  PrivateRouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref SubnetPrivate

### Secury group Web ###
  SecGroupWeb:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: WebServers
      GroupDescription: WebServers from machine
      VpcId: !Ref NewVPC
      SecurityGroupIngress:
        -
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        -
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        -
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        -
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        -
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        -
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Web-Sec-Group

### Secury group DB ###
  SecGroupDB:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: DB
      GroupDescription: DB from machine
      VpcId: !Ref NewVPC
      SecurityGroupIngress:
        -
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        -
          IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        -
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        -
          IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-DB-Sec-Group

### Creating Volumes from database ######
  DBVolume:
    Type: AWS::EC2::Volume
    DeletionPolicy: Snapshot
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '' ]
      Size: 20
      Tags:
        -
          Key: Name
          Value: data-volume
      VolumeType: gp2

### Creating instances from database ######
  Dbinstance:
    DependsOn: DBVolume
    Type: AWS::EC2::Instance
    Properties:
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeType: gp2
            VolumeSize: 24
      InstanceType: t2.micro
      ImageId: ami-0d5eff06f840b45e9
      KeyName: ledivan.pem
      Monitoring: true
      AvailabilityZone: !Select [0, !GetAZs '' ]
      SecurityGroupIds:
        - !Ref SecGroupDB
      SubnetId: !Ref SubnetPrivate
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-DB-instance
      Volumes:
        - Device: "/dev/sdf"
          VolumeId: !Ref DBVolume

### Creating Elastic IP ##############
  # NewInstanceIP:
  #   DependsOn: NewWeb
  #   Type: AWS::EC2::EIP
  #   Properties:
  #     InstanceId: !Ref NewWeb
  #     Domain: NewVPC

### Creating instances from Web ######
  NewWeb:
    Type: AWS::EC2::Instance
    Properties:
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeType: gp2
            VolumeSize: 24
      InstanceType: t2.micro
      ImageId: ami-0d5eff06f840b45e9
      KeyName: ledivan.pem
      Monitoring: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Web-instance
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet:
            - Ref: SecGroupWeb
          SubnetId:
            Ref: SubnetPublic
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            yum -y update
            sudo yum install -y httpd
            sudo systemctl start httpd
            sudo echo '<h1>Hello from ${AWS::Region}</h1>' > /var/www/html/index.html